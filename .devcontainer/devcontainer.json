// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose
{
    "name": "Website",

    // Update the 'dockerComposeFile' list if you have more compose files or use different names.
    // The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
    "dockerComposeFile": ["../docker-compose.yml", "docker-compose.yml"],

    // The 'service' property is the name of the service for the container that VS Code should
    // use. Update this value and .devcontainer/docker-compose.yml to the real service name.
    "service": "dev",

    // The optional 'workspaceFolder' property is the path VS Code should open by default when
    // connected. This is typically a file mount in .devcontainer/docker-compose.yml
    "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",

    // Features to add to the dev container. More info: https://containers.dev/features.
    // "features": {},

    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    "forwardPorts": [8080],

    // Uncomment the next line if you want start specific services in your Docker Compose config.
    // "runServices": [],

    // Uncomment the next line if you want to keep your containers running after VS Code shuts down.
    // "shutdownAction": "none",

    // Use 'postCreateCommand' to run commands after the container is created.
    "postCreateCommand": "npm install",

    // Comment out to connect as root instead. In that case you may need to change the mounts
    // configuration too. More info: https://aka.ms/vscode-remote/containers/non-root.
    "remoteUser": "node",

    // Configure tool-specific properties.
    "customizations": {
        // Configure properties specific to VS Code.
        "vscode": {
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "Elmtooling.elm-ls-vscode",
                "esbenp.prettier-vscode",
                "GitHub.copilot"
            ]
        }
    },

    // Uncomment to connect as an existing user other than the container default. More info: https://aka.ms/dev-containers-non-root.
    // "remoteUser": "devcontainer"
    // Keeping the elm dependency cache mounted in a volume is both a small performance benefit
    // when having rebuilt your container. It also solves a problem with the Elm Language Server.
    // The Elm Language Server uses the dependency cache stored at ~/.elm.
    // However, the elm compiler uses elm-stuff in the mounted directory which keeps timestamps
    // telling the elm compiler whether elm.json changed since it last downloaded dependencies.
    // This data is persisted, but without a volume the ~/.elm dependency cache itself is not
    // persisted, resulting in a corruption of that relationship.
    // The Elm Language Server expects the elm compiler to keep ~/.elm up to date, but because
    // of this failure it will crash continuously when ~/.elm does not store the elm code for
    // the dependencies. This will usually occur every time the container has been rebuilt
    // and is manually fixed by deleting the elm-stuff directory which forces the compiler to
    // redownload dependencies.
    // Adding this volume will preserve the elm cache between rebuilds though, fixing this issue
    // NOTE: as we are working in a docker-compose environment, we mounted the volumes in ./devcontainer/docker-compose.yml
    "features": {
        "ghcr.io/devcontainers/features/common-utils:2": {},
        "ghcr.io/devcontainers/features/github-cli:1": {}
    }
}
